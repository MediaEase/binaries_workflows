name: Compile Libtorrent (Rakshasa)

permissions: write-all

on:
  schedule:
    - cron: "0 11 */2 * *"
  push:
    branches:
      - main
    paths:
      - '.github/workflows/rakshasa.yml'

jobs:
  libtorrent:
    runs-on: ubuntu-24.04
    strategy:
      max-parallel: 1
      matrix:
        include:
          - build_type: nightly
            libtorrent_package_name: libtorrent24
            libtorrent_dev_package_name: libtorrent-dev
            libtorrent_version: 0.15.1
            libtorrent_package_suffix: "-nightly"
            branch_ref: master
          - build_type: release
            libtorrent_package_name: libtorrent22
            libtorrent_dev_package_name: libtorrent-dev
            libtorrent_version: 0.14.0
            libtorrent_package_suffix: ""
            branch_ref: v0.14.0
          - build_type: release
            libtorrent_package_name: libtorrent21
            libtorrent_dev_package_name: libtorrent-dev
            libtorrent_version: 0.13.8
            libtorrent_package_suffix: ""
            branch_ref: v0.13.8
    env:
      REPO_PATH: "${{ github.workspace }}/binaries"
      CURRENT_LIBTORRENT_PATH: "${{ github.workspace }}/binaries/dist/current/libtorrent-rakshasa"
      ARCHIVE_LIBTORRENT_PATH: "${{ github.workspace }}/binaries/dist/archive/libtorrent-rakshasa"
      POOL_PATH: "${{ github.workspace }}/binaries/dist/pool"
      SCRIPTS_PATH: "${{ github.workspace }}/binaries/scripts"
      TIME_DIFF: 480000  # hours
    outputs:
      artifact-id: ${{ steps.upload_package_data.outputs.artifact-id }}
      artifact-url: ${{ steps.upload_package_data.outputs.artifact-url }}
    steps:
      - name: Update packages
        run: sudo apt-get update --fix-missing

      - uses: tecolicom/actions-use-apt-tools@v1
        with:
          tools: build-essential autoconf automake libtool pkg-config cmake git libssl-dev libcurl4-openssl-dev libsigc++-2.0-dev libncurses5-dev libncursesw5-dev libtool intltool checkinstall jq
          cache: false

      - name: Checkout Binaries Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ env.REPO_PATH }}

      - name: Determine Libtorrent Version and Updates
        id: libtorrent_update
        env:
          build_type: ${{ matrix.build_type }}
          time_diff: ${{ env.TIME_DIFF }}
          REF: ${{ matrix.branch_ref }}
          LIBTORRENT_VERSION: ${{ matrix.libtorrent_version }}
          PACKAGE_SUFFIX: ${{ matrix.libtorrent_package_suffix }}
          PACKAGE_NAME: ${{ matrix.libtorrent_package_name }}
          DEV_PACKAGE_NAME: ${{ matrix.libtorrent_dev_package_name }}
        run: |
          set -e
          CURRENT_TIME=$(date +%s)
          REPO_URL="https://github.com/rakshasa/libtorrent"
          git clone --depth 1 --branch "$REF" "$REPO_URL" ${{ github.workspace }}/libtorrent-rakshasa
          cd ${{ github.workspace }}/libtorrent-rakshasa
          git submodule update --init --recursive
          LATEST_COMMIT_SHA=$(git rev-parse HEAD)
          COMMIT_DATE=$(git show -s --format=%ci "${LATEST_COMMIT_SHA}")
          if [ -z "$COMMIT_DATE" ]; then
            echo "Warning: Unable to fetch commit date. Skipping build."
            echo "update_needed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          COMMIT_EPOCH=$(date -d "$COMMIT_DATE" +%s)
          TIME_DIFF_HOURS=$(( (CURRENT_TIME - COMMIT_EPOCH) / 3600 ))
          echo "Latest commit was $TIME_DIFF_HOURS hours ago."
          if (( TIME_DIFF_HOURS <= ${time_diff} )); then
            UPDATE_NEEDED=true
            echo "Recent commit detected. Proceeding with build."
          else
            UPDATE_NEEDED=false
            echo "No recent commits in the last ${time_diff} hours. Skipping build."
            echo "update_needed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          ARCHITECTURE="amd64"
          CURRENT_DATE=$(date +%Y-%m-%d)
          BUILD_NUMBER=$(bash ${{ env.SCRIPTS_PATH }}/increment_revision.sh "${PACKAGE_NAME}${PACKAGE_SUFFIX}" "$LIBTORRENT_VERSION" "${{ env.CURRENT_LIBTORRENT_PATH }}")
          FULL_VERSION="${LIBTORRENT_VERSION}-1${BUILD_NUMBER}"
          echo "FULL_VERSION=${FULL_VERSION}" >> $GITHUB_OUTPUT
          echo "ARCHITECTURE=${ARCHITECTURE}" >> $GITHUB_OUTPUT
          echo "PACKAGE_NAME=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
          echo "DEV_PACKAGE_NAME=${DEV_PACKAGE_NAME}" >> $GITHUB_OUTPUT
          echo "update_needed=true" >> $GITHUB_OUTPUT

      - name: Apply Patches (if needed)
        if: ${{ matrix.libtorrent_version == '0.13.8' && matrix.build_type == 'release' }}
        run: |
          set -e
          echo "Applying patches for version 0.13.8..."
          cd ${{ github.workspace }}/libtorrent-rakshasa
          if [ -d "${{ env.REPO_PATH }}/patches/libtorrent-rakshasa" ]; then
            for patch in ${{ env.REPO_PATH }}/patches/libtorrent-rakshasa/*0.13.8.patch; do
              echo "Applying patch $patch"
              patch -p1 --fuzz=3 --ignore-whitespace --verbose < "$patch"
            done
          fi

      - name: Compile and Install Libtorrent
        id: libtorrent_build
        if: steps.libtorrent_update.outputs.update_needed == 'true'
        env:
          build_type: ${{ steps.libtorrent_update.outputs.build_type }}
          LIBTORRENT_VERSION: ${{ steps.libtorrent_update.outputs.libtorrent_version }}
          SCRIPTS_PATH: ${{ env.SCRIPTS_PATH }}
        run: |
          set -e
          cd ${{ github.workspace }}/libtorrent-rakshasa
          if [ ! -f ./autogen.sh ]; then
            autoreconf -fi
          else
            chmod +x autogen.sh
            ./autogen.sh
          fi
          ./configure --prefix=/usr --disable-debug --disable-dependency-tracking --with-posix-fallocate
          make -j$(nproc)
          INSTALL_DIR=$(mktemp -d)
          make DESTDIR="${INSTALL_DIR}" install
          find "${INSTALL_DIR}" -type f -executable -exec strip --strip-unneeded {} + || true
          echo "libtorrent_compiled=true" >> $GITHUB_OUTPUT
          echo "INSTALL_DIR=${INSTALL_DIR}" >> $GITHUB_OUTPUT

      - name: Run Packaging Script
        id: run_packaging
        if: steps.libtorrent_build.outputs.libtorrent_compiled == 'true'
        env:
          ARCHITECTURE: ${{ steps.libtorrent_update.outputs.ARCHITECTURE }}
          FULL_VERSION: ${{ steps.libtorrent_update.outputs.FULL_VERSION }}
          PACKAGE_NAME: ${{ steps.libtorrent_update.outputs.PACKAGE_NAME }}
          DEV_PACKAGE_NAME: ${{ steps.libtorrent_update.outputs.DEV_PACKAGE_NAME }}
          INSTALL_DIR: ${{ steps.libtorrent_build.outputs.INSTALL_DIR }}
          SCRIPTS_PATH: ${{ env.SCRIPTS_PATH }}
        run: |
          set -e
          echo "Running packaging.sh with arguments:"
          echo "  ARCHITECTURE=$ARCHITECTURE"
          echo "  FULL_VERSION=$FULL_VERSION"
          echo "  PACKAGE_NAME=$PACKAGE_NAME"
          echo "  DEV_PACKAGE_NAME=$DEV_PACKAGE_NAME"
          echo "  INSTALL_DIR=$INSTALL_DIR"
          bash "${env.SCRIPTS_PATH}/build_libtorrent.sh" "$ARCHITECTURE" "$FULL_VERSION" "$PACKAGE_NAME" "$DEV_PACKAGE_NAME" "$INSTALL_DIR"
          if [ -n "$(find packaging_dir -type f -name "${PACKAGE_NAME}*.deb")" ]; then
            echo "libtorrent_packaged=true" >> $GITHUB_OUTPUT
          else
            echo "libtorrent_packaged=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Process Packaging Artifacts
        id: process_artifacts
        if: steps.run_packaging.outputs.libtorrent_packaged == 'true'
        env:
          FULL_VERSION: ${{ steps.libtorrent_update.outputs.FULL_VERSION }}
          CURRENT_DATE: ${{ steps.libtorrent_update.outputs.CURRENT_DATE }}
          ARCHITECTURE: ${{ steps.libtorrent_update.outputs.ARCHITECTURE }}
        run: |
          set -e
          ARTIFACTS_DIR="${GITHUB_WORKSPACE}/artifacts"
          mkdir -p "$ARTIFACTS_DIR"
          for deb in packaging_dir/*.deb; do
            fname=$(basename "$deb")
            pkg_base="${fname%%_*}"
            echo "Processing $fname (base: $pkg_base)"
            checksum=$(sha256sum "$deb" | awk '{print $1}')
            json_file="${pkg_base}.json"
            cat > "$json_file" <<EOF
            {
              "package_name": "$fname",
              "checksum": "$checksum",
              "version": "$FULL_VERSION",
              "category": "libtorrent",
              "build_date": "$CURRENT_DATE"
            }
            EOF
            pkg_artifact_dir="$ARTIFACTS_DIR/$pkg_base"
            mkdir -p "$pkg_artifact_dir"
            cp "$json_file" "$pkg_artifact_dir/"
            cp "$deb" "$pkg_artifact_dir/"
            tar -czf "$ARTIFACTS_DIR/${pkg_base}.tar.gz" -C "$ARTIFACTS_DIR" "$pkg_base"
            rm -rf "$pkg_artifact_dir"
          done
          echo "artifact_ready=true" >> $GITHUB_OUTPUT  

      - name: Upload Package Data
        id: upload_package_data
        if: steps.process_artifacts.outputs.artifact_ready == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: libtorrent-${{ matrix.libtorrent_version }}${{ matrix.libtorrent_package_suffix }}
          path: ${{ github.workspace }}/artifacts
      
  commit_and_push:
    if: ${{ needs.libtorrent.outputs.artifact-id != null }}
    needs: libtorrent
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Binaries Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ github.workspace }}/binaries

      - name: Download Package Data Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ github.workspace }}/outputs

      - name: Extract Package Data Artifacts
        run: |
          set -e
          output_dir="${{ github.workspace }}/outputs"
          find "${output_dir}" -type f -name "*.tar.gz" -exec tar -xzf {} -C "${output_dir}" \;

      - name: Archive and Upload Libtorrent Packages
        env:
          REPO_PATH: "${{ github.workspace }}/binaries"
          CURRENT_LIBTORRENT_PATH: "${{ github.workspace }}/binaries/dist/current/libtorrent-rakshasa"
          ARCHIVE_LIBTORRENT_PATH: "${{ github.workspace }}/binaries/dist/archive/libtorrent-rakshasa"
          POOL_PATH: "${{ github.workspace }}/binaries/dist/pool"
          SCRIPTS_PATH: "${{ github.workspace }}/binaries/scripts"
        run: |
          set -e
          mkdir -p "${POOL_PATH}"
          output_dir="${{ github.workspace }}/outputs"
          for deb_file in $(find "${output_dir}" -type f -name "*.deb"); do
            cp "${deb_file}" "${POOL_PATH}/"
            bash "${SCRIPTS_PATH}/archive_packages.sh" "${CURRENT_LIBTORRENT_PATH}" "${ARCHIVE_LIBTORRENT_PATH}" "${POOL_PATH}/$(basename "${deb_file}")"
          done

      - name: Show Git Status
        run: |
          cd ${{ github.workspace }}/binaries
          git status
          git ls-files

      - name: Build Commit Message
        id: build_commit_message
        run: |
          set -e
          output_dir="${{ github.workspace }}/outputs"
          commit_description=""
          for json_file in $(find "${output_dir}" -type f -name "*.json"); do
            package_data=$(cat "${json_file}")
            package_name=$(echo "${package_data}" | jq -r '.package_name')
            package_version=$(echo "${package_data}" | jq -r '.version')
            commit_description="${commit_description}
            - ${package_name} updated to ${package_version}"
          done
          commit_message="Update libtorrent packages [automated]"
          echo "Commit message is:"
          echo "${commit_message}${commit_description}"
          echo "commit_message<<EOF" >> $GITHUB_OUTPUT
          echo "${commit_message}${commit_description}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Commit and Push Libtorrent Packages
        uses: EndBug/add-and-commit@v9
        env:
          commit_message: "${{ steps.build_commit_message.outputs.commit_message }}"
          author_email: "${{ secrets.COMMITER_EMAIL }}"
          author_name: "${{ secrets.COMMITER_NAME }}"
        with:
          author_name: "${{ env.author_name }}"
          author_email: "${{ env.author_email }}"
          default_author: user_info
          message: ${{ env.commit_message }}
          cwd: "./binaries"
          add: |
            dist/current/libtorrent-rakshasa/
            dist/archive/libtorrent-rakshasa/
          push: true
          pull: "--rebase --autostash"

  trigger_manifest_update:
    needs: [libtorrent, commit_and_push]
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Binaries Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ github.workspace }}/binaries

      - name: Download Package Data Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ github.workspace }}/outputs

      - name: Collect Outputs
        id: collect_outputs
        run: |
          set -e
          output_dir="${{ github.workspace }}/outputs"
          manifest_updates="{\"package_updates\": {}}"
          find "${output_dir}" -type f -name "*.tar.gz" -execdir tar -xzf "{}" \;
          for json_file in $(find "${output_dir}" -type f -name "*.json"); do
            package_data=$(cat "${json_file}")
            package_name=$(echo "${package_data}" | jq -r '.package_name')
            manifest_updates=$(echo "${manifest_updates}" | jq ".package_updates += {\"${package_name}\": ${package_data}}")
          done
          echo "${manifest_updates}" > "${output_dir}/manifest_updates.json"
          echo "manifest_updates<<EOF" >> $GITHUB_OUTPUT
          echo "${manifest_updates}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Trigger Update Manifest Workflow
        uses: peter-evans/repository-dispatch@v3
        with:
          event-type: update-manifest
          client-payload: ${{ steps.collect_outputs.outputs.manifest_updates }}
