name: Create Release

permissions: write-all

on:
  repository_dispatch:
    types: [create-release]

jobs:
  release:
    runs-on: ubuntu-latest

    env:
      RELEASE_ASSETS: "${{ github.workspace }}/binaries/release_assets"
      WORKFLOWS_PATH: "${{ github.workspace }}/workflows"
      PUBLIC_REPO_PATH: "${{ github.workspace }}/releases"
      ARCHIVE_REPO_PATH: "${{ github.workspace }}/releases-archives"
      DIST_PATH: "${{ github.workspace }}/workflows/dist"
      TMP_DIR_BASE: "/tmp/release"

    steps:
      - name: Checkout Workflows Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ env.WORKFLOWS_PATH }}

      - name: Checkout Public Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: MediaEase/binaries
          path: ${{ env.PUBLIC_REPO_PATH }}

      - name: Checkout Archive Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: MediaEase/archived-binaries
          path: ${{ env.ARCHIVE_REPO_PATH }}

      - name: Initialize Environment Variables
        run: |
          echo "PACKAGE_NAME=${{ github.event.client_payload.package_name }}" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=${{ github.event.client_payload.package_version }}" >> $GITHUB_ENV
          current_date=$(date +'%Y-%m-%d')
          echo "CURRENT_DATE=${current_date}" >> $GITHUB_ENV

      - name: Determine Packages to Include
        id: determine_packages
        run: |
          set -e
          PACKAGES_TO_INCLUDE=()
          RELEASE_NAME=""
          
          case "${PACKAGE_NAME}" in
            rtorrent)
              PACKAGES_TO_INCLUDE+=("mktorrent/mktorrent*.deb" "libudns/libudns*.deb" "xmlrpc-c/xmlrpc-c-stable*.deb" "rtorrent/rtorrent_*.deb" "libtorrent-rakshasa/libtorrent21_*.deb" "libtorrent-rakshasa/libtorrent-dev_*.deb"")
              RELEASE_NAME="rtorrent ${PACKAGE_VERSION} Release"
              ;;
            rtorrent-nightly)
              PACKAGES_TO_INCLUDE+=("mktorrent/mktorrent*.deb" "libudns/libudns*.deb" "xmlrpc-c/xmlrpc-c-advanced*.deb" "rtorrent/rtorrent-nightly*.deb" "libtorrent-rakshasa/libtorrent22-nightly*.deb" "libtorrent-rakshasa/libtorrent-dev-nightly_*.deb")
              RELEASE_NAME="rtorrent-nightly ${PACKAGE_VERSION} Release"
              ;;
            deluge)
              PACKAGES_TO_INCLUDE+=("deluge/deluge-common_*${PACKAGE_VERSION}*.deb" "deluge/deluged_*${PACKAGE_VERSION}*.deb" "deluge/deluge-web_*${PACKAGE_VERSION}*.deb" "libtorrent-rasterbar/libtorrent-rasterbar2.0t64_*.deb" "libtorrent-rasterbar/python3-libtorrent_*.deb" "libtorrent-rasterbar/libtorrent-rasterbar-dev_*.deb")
              RELEASE_NAME="Deluge ${PACKAGE_VERSION} Release"
              ;;
            transmission)
              PACKAGES_TO_INCLUDE+=("transmission/transmission-common_*${PACKAGE_VERSION}*.deb" "transmission/transmission-cli_*${PACKAGE_VERSION}*.deb")
              RELEASE_NAME="Transmission ${PACKAGE_VERSION} Release"
              ;;
            transmission-nightly)
              PACKAGES_TO_INCLUDE+=("transmission/transmission-common-nightly_*${PACKAGE_VERSION}*.deb" "transmission/transmission-cli-nightly_*${PACKAGE_VERSION}*.deb")
              RELEASE_NAME="Transmission ${PACKAGE_VERSION} (Nightly) Release"
              ;;
            qbittorrent-nox)
              PACKAGES_TO_INCLUDE+=("qbittorrent/qbittorrent-nox_*${PACKAGE_VERSION}*.deb")
              RELEASE_NAME="qBittorrent ${PACKAGE_VERSION} Release"
              ;;
            qbittorrent-nox-nightly)
              PACKAGES_TO_INCLUDE+=("qbittorrent/qbittorrent-nox-nightly_*.deb")
              RELEASE_NAME="qBittorrent ${PACKAGE_VERSION}-nightly Release"
              ;;
            media-driver)
              PACKAGES_TO_INCLUDE+=("media-driver/mediadriver*.deb" "libva/libva*.deb" "gmmlib/gmmlib*.deb")
              RELEASE_NAME="Intel Media Driver ${PACKAGE_VERSION} Release"
              ;;
            *)
              echo "Unknown package: ${PACKAGE_NAME}"
              exit 1
              ;;
          esac
          
          echo "PACKAGES_TO_INCLUDE=${PACKAGES_TO_INCLUDE[@]}" >> $GITHUB_ENV
          echo "RELEASE_NAME=${RELEASE_NAME}" >> $GITHUB_ENV

      - name: Collect Packages and Generate Checksums
        id: collect_packages
        run: |
          set -e
          TMP_RELEASE_DIR=$(mktemp -d -p "${{ env.TMP_DIR_BASE }}")
          CHECKSUM_FILE="${TMP_RELEASE_DIR}/${PACKAGE_NAME}_${PACKAGE_VERSION}_checksums.txt"
          touch "$CHECKSUM_FILE"

          for pattern in ${PACKAGES_TO_INCLUDE[@]}; do
            package_files=(${env.DIST_PATH}/current/${pattern})
            if [[ ${#package_files[@]} -eq 0 ]]; then
              echo "Error: No packages found for pattern: $pattern"
              exit 1
            fi
            for file in "${package_files[@]}"; do
              cp "$file" "$TMP_RELEASE_DIR/"
              checksum=$(sha256sum "$file" | awk '{print $1}')
              echo "$(basename "$file"): $checksum" >> "$CHECKSUM_FILE"
            done
          done

          echo "TMP_RELEASE_DIR=${TMP_RELEASE_DIR}" >> $GITHUB_ENV
          echo "CHECKSUM_FILE=${CHECKSUM_FILE}" >> $GITHUB_ENV

      - name: Create Release Archive
        run: |
          set -e
          TMP_RELEASE_DIR="${TMP_RELEASE_DIR}"
          ARCHIVE_FILE="${PACKAGE_NAME}_${PACKAGE_VERSION}.tar.gz"
          RELEASE_PATH="${RELEASE_ASSETS}/${PACKAGE_NAME}"

          mkdir -p "$RELEASE_PATH"
          if [[ -f "${RELEASE_PATH}/${ARCHIVE_FILE}" ]]; then
            mv "${RELEASE_PATH}/${ARCHIVE_FILE}" "${ARCHIVE_REPO_PATH}/${PACKAGE_NAME}/"
          fi

          tar -czf "${RELEASE_PATH}/${ARCHIVE_FILE}" -C "$TMP_RELEASE_DIR" .
          rm -rf "$TMP_RELEASE_DIR"

      - name: Commit and Push Release Archive
        uses: EndBug/add-and-commit@v9
        with:
          author_email: "${{ secrets.COMMITTER_EMAIL }}"
          author_name: "${{ secrets.COMMITTER_NAME }}"
          default_author: user_info
          message: "Update ${{ env.PACKAGE_NAME }} assets to v${{ env.PACKAGE_VERSION }} [automated]"
          cwd: "${RELEASE_ASSETS}"
          add: |
            binaries/release_assets/${PACKAGE_NAME}/
          push: true
          pull: "--rebase --autostash"

      - name: Commit and Push Archived Releases
        uses: EndBug/add-and-commit@v9
        with:
          author_email: "${{ secrets.COMMITTER_EMAIL }}"
          author_name: "${{ secrets.COMMITTER_NAME }}"
          default_author: user_info
          message: "Archive old releases of ${{ env.PACKAGE_NAME }} [automated]"
          cwd: "${ARCHIVE_REPO_PATH}"
          add: |
            ${PACKAGE_NAME}/
          push: true
          pull: "--rebase --autostash"
